import numpy as np

def two_sided_KS_test(DataSet, lncBasis, lncCoeff, ymin, ymax):
    '''
    Two-sided Kolmogorov-Smirnov Test (asymptotic form) implemented as in Berg and Harris paper (Comput. Phys. Commun. 179, 6, pp. 443-448 (2008).), kolm2_as.f .
    -> implemented via Stephens' expression (J. Royal Stat. Soc. Series B 32, 1, pp. 115-122 (1970).)
    
    Parameters
    ----------
    DataSet :
        - the data set generated by the function "fill_dataSet"
        - an array with the following indexing scheme: [data point number, data values]
          data values as follows:  [x,0]: sorted data set
                                   [x,1]: CDF
                                   [x,2]: remainder (CDF - straight line)
    lncBasis :
        - a list that stores the basis set for ln(c) in SymPy lambda functions
    lncCoeff :
        - a list that stores the Fourier coefficients (up to a certain number of terms) calculated by the function "fourierCoeff"
    ymin, ymax :
        - min. and max. of f(x) within the integration domain

    Returns
    -------
    Q :
        - the Kolmogorov-Smirnov probability ( a real number between 0 and 1)
    '''

    # number of samples per data set
    N = np.size(DataSet[:,0])
    delta = 0.0
    i = 1
    while (i < N):
        y = DataSet[i,0]
        Fxct = np.dot(np.asarray(lncCoeff), np.asarray(lncBasis(y))) + ((y - ymin) / (ymax - ymin))

        Femp = DataSet[i-1,1]
        delta = max(delta, np.fabs(Fxct - Femp))

        Femp = DataSet[i,1]
        delta = max(delta, np.fabs(Femp - Fxct))

        i = i + 1

    sqrt_N = np.sqrt(N)

#    Uncomment for the alternate KS test
#    For two-sample test:
#    sqrt_N = np.sqrt((N*N)/(2.0*N))

    A = -2.0 * ((delta * (sqrt_N + 0.12 + (0.11/sqrt_N)))**2.0)
    sign = 1.0
    Q = 0.0
    cutoff = 0.0

    j = 1
    while (j <= 100):
        increment = sign * 2.0 * np.exp(A * j**2.0)
        Q = Q + increment
        if (np.fabs(increment) <= cutoff):
            j = 101
        sign = -1.0 * sign
        cutoff = np.fabs(increment) / 1000.0
        j = j + 1
    return (Q)

